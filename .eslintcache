[{"D:\\ReactApps\\internship-project\\src\\index.js":"1","D:\\ReactApps\\internship-project\\src\\reportWebVitals.js":"2","D:\\ReactApps\\internship-project\\src\\App.js":"3","D:\\ReactApps\\internship-project\\src\\axios.js":"4","D:\\ReactApps\\internship-project\\src\\Image.js":"5"},{"size":500,"mtime":499162500000,"results":"6","hashOfConfig":"7"},{"size":362,"mtime":499162500000,"results":"8","hashOfConfig":"7"},{"size":2733,"mtime":1607730136336,"results":"9","hashOfConfig":"7"},{"size":148,"mtime":1607713083970,"results":"10","hashOfConfig":"7"},{"size":530,"mtime":1607778393736,"results":"11","hashOfConfig":"7"},{"filePath":"12","messages":"13","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"14"},"9w5mcz",{"filePath":"15","messages":"16","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"14"},{"filePath":"17","messages":"18","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"19","usedDeprecatedRules":"14"},{"filePath":"20","messages":"21","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"14"},{"filePath":"22","messages":"23","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"D:\\ReactApps\\internship-project\\src\\index.js",[],["24","25"],"D:\\ReactApps\\internship-project\\src\\reportWebVitals.js",[],"D:\\ReactApps\\internship-project\\src\\App.js",["26","27","28","29"],"import React, { useEffect, useState } from \"react\";\nimport Image from \"./Image\";\nimport \"./App.css\";\nimport axios from \"./axios\";\nfunction App() {\n  // A state variable for managing the images array variable\n  const [images, setImage] = useState([]);\n  const [maxLength, setLength] = useState(10);\n  const [counter, setCounter] = useState(0);\n  const [button, setButton] = useState(\"Load More\");\n  //Get the iamges from the api when the component renders once\n  //once because we are using an empty array as a second argument\n\n  useEffect(() => {\n    //asynchronously get the iamges from the api using axios for making requests\n    //async function is basically returning the promise and await is returning the resolved result\n    //from the result after the resolve is ready (using await)\n    const getImages = async () => {\n      const response = await axios.get(\"/photos\");\n      //axios is returning the object with data, status and so on\n      //The one we are interested in is data(the array of the result)\n      //filter the response.data array to showing only even id albums\n      setImage(response.data.filter((data) => data.albumId % 2 == 0));\n\n      //return a response beccause every async function should return a promise\n      return response;\n    };\n    getImages();\n  }, []);\n\n  // create a new array for storing only 1 image per album\n  let newArr = [];\n  let c = 0; // will increase by 50, because each album has 50 images and hence the next album will start exactly after the 50th image\n  for (let i = 0; i <= images.length; i++) {\n    // check if the loop has reached to 0,50,100th... image . If yes, push it to the new array and then increase by 50\n    if (i == c) {\n      newArr.push(images[i]);\n      c += 50;\n    }\n  }\n  newArr.pop(); // to get rid of the last undefined. We have it because the image's index is starting with 0 index, but its own id is from 1\n  console.log(newArr);\n  const showMore = (e) => {\n    // max of 54 images in gallery\n    if (maxLength < 50) setLength((prevValue) => prevValue + 10);\n    else {\n      setButton(\"No More Data\"); //Load no data anymore\n    }\n  };\n  //Using the BEM conversion for the naming\n  return (\n    <div className=\"app\">\n      <div className=\"app__body\">\n        <div className=\"row\">\n          {newArr.slice(0, maxLength).map((image) => (\n            //important to have unique keys for repeated components (will render only the component which changed, leaving another ones unreloaded again )\n            <Image key={image.id} url={image.url} title={image.title} />\n          ))}\n        </div>\n        <div className=\"app__showMore\">\n          <button onClick={showMore}>{button}</button>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","D:\\ReactApps\\internship-project\\src\\axios.js",[],"D:\\ReactApps\\internship-project\\src\\Image.js",[],{"ruleId":"30","replacedBy":"31"},{"ruleId":"32","replacedBy":"33"},{"ruleId":"34","severity":1,"message":"35","line":9,"column":10,"nodeType":"36","messageId":"37","endLine":9,"endColumn":17},{"ruleId":"34","severity":1,"message":"38","line":9,"column":19,"nodeType":"36","messageId":"37","endLine":9,"endColumn":29},{"ruleId":"39","severity":1,"message":"40","line":23,"column":64,"nodeType":"41","messageId":"42","endLine":23,"endColumn":66},{"ruleId":"39","severity":1,"message":"40","line":36,"column":11,"nodeType":"41","messageId":"42","endLine":36,"endColumn":13},"no-native-reassign",["43"],"no-negated-in-lhs",["44"],"no-unused-vars","'counter' is assigned a value but never used.","Identifier","unusedVar","'setCounter' is assigned a value but never used.","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","no-global-assign","no-unsafe-negation"]